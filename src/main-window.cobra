@args -pkg:gtk-sharp-2.0

use Gtk

class FerretWindow inherits Window

	cue init
		base.init('Ferret: Select document filenames for comparison')
		listen .deleteEvent, do(obj, e as DeleteEventArgs)
			Application.quit
		.createWidgets
		.setDefaultSize(500, 400)

	def createWidgets
		titleLabel = Label('<big><b>Ferret 5.0 (alpha)</b></big>')
		titleLabel.useMarkup = true
		subtitleLabel = Label('<big><i>A Copy-Detection Program</i></big>')
		subtitleLabel.useMarkup = true
		subsubtitleLabel = Label('Developed by the Plagiarism Detection Group, University of Hertfordshire')
		subsubtitleLabel.useMarkup = true

		addButton = Button('Add Documents ...')
		clearButton = Button('Clear Documents')
		documentTitle = Label('List of document filenames, to analyse for signs of copying:')
		documentTitle.setAlignment(0.0_f32, 0.5_f32)

		documentList = TreeView()
		documentModel = ListStore(String.getType)
		documentList.headersVisible = false
		documentList.model = documentModel
		documentList.appendColumn('', CellRendererText(), "text", 0)
		documentListScrolled = ScrolledWindow()
		documentListScrolled.add(documentList)
		documentListScrolled.shadowType = ShadowType.In

		helpButton = Button(Stock.help)
		runButton = Button('Run Ferret')

		runButton.sensitive = false
		clearButton.sensitive = false

		filenames = List<of String>()
		
		# -- attach actions to buttons
		listen addButton.clicked, do(sender, args as EventArgs)
			fc = FileChooserDialog('Select document(s) to analyse',
				this,
				FileChooserAction.Open,
				"Cancel",ResponseType.Cancel,
				"Open",ResponseType.Accept)
		
			# -- filter for all
			filter = FileFilter()
			filter.name = "All files"
			filter.addPattern("*.*")
			fc.addFilter(filter)

			# -- filter for doc
			filter = FileFilter()
			filter.name = "Doc files"
			filter.addPattern("*.doc")
			fc.addFilter(filter)

			# -- filter for pdf 
			filter = FileFilter()
			filter.name = "Pdf files"
			filter.addPattern("*.pdf")
			fc.addFilter(filter)

			# -- filter for text
			filter = FileFilter()
			filter.name = "Text files"
			filter.addPattern("*.txt")
			fc.addFilter(filter)

			# -- filter for C-code 
			filter = FileFilter()
			filter.name = "C/CPP files"
			filter.addPattern("*.c")
			filter.addPattern("*.h")
			filter.addPattern("*.cpp")
			fc.addFilter(filter)

			fc.selectMultiple = true
			if fc.run == ResponseType.Accept to int
				for filename in fc.filenames
					documentModel.appendValues(filename)
					filenames.add(filename)
			fc.destroy
			runButton.sensitive = documentModel.iterNChildren > 1
			clearButton.sensitive = documentModel.iterNChildren > 0
		listen clearButton.clicked, do(sender, args as EventArgs)
			documentModel.clear
			filenames.clear
			runButton.sensitive = false
			clearButton.sensitive = false
		listen helpButton.clicked, do(sender, args as EventArgs)
			HelpWindow.showMain
		listen runButton.clicked, do(sender, args as EventArgs)
			task = Documents()
			
			for filename in filenames
				task.add(filename)
			task.run
			.destroy
			ResultsWindow(task).showAll

		# -- assemble the panel for add/clear/show documents
		documentControls = HBox(true, 5)
		documentControls.packStart(addButton, false, false, 0)
		documentControls.packStart(clearButton, false, false, 0)

		# -- assemble the panel to place at bottom of frame
		basePanel = HBox(false, 5)
		basePanel.packStart(helpButton, false, false, 0)
		basePanel.packEnd(runButton, false, false, 0)

		# -- assemble the main panel
		box = VBox(false, 7)
		box.borderWidth = 10
		box.packStart(titleLabel, false, false, 0)
		box.packStart(subtitleLabel, false, false, 0)
		box.packStart(subsubtitleLabel, false, false, 0)
		box.packStart(HSeparator(), false, false, 0)
		box.packStart(documentControls, false, false, 0)
		box.packStart(documentTitle, false, false, 0)
		box.packStart(documentListScrolled, true, true, 0)
		box.packStart(HSeparator(), false, false, 0)
		box.packStart(basePanel, false, false, 0)

		.add(box)
